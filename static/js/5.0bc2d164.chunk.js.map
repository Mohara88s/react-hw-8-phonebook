{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/Contact/Contact.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operaions.js","components/Filter/Filter.js","components/Contact/Contact.js","components/ContactList/ContactList.js","views/ContactsView.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","contactsSelectors","getError","error","getLoading","loading","getFiltredContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","number","hendelInputChange","event","setState","currentTarget","value","hendelSubmit","preventDefault","props","some","contactItem","alert","newContact","id","uuidv4","onAddContact","Form","className","styles","form","onSubmit","this","Group","controlId","Label","Control","type","placeholder","pattern","title","required","onChange","Button","variant","Component","connect","dispatch","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","addContact","Filter","useSelector","useDispatch","changeFilter","Contact","contact__info","onClick","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","ContactList","useEffect","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","filtredContacts","Spinner","animation","ListGroup","contactList","map","Item","ContactsView"],"mappings":"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","file":"static/js/5.0bc2d164.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__8Lp9c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__3ylBr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__3Ghws\",\"contact__info\":\"Contact_contact__info__3TsBV\",\"name\":\"Contact_name__27fqc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3ioWq\",\"error\":\"ContactList_error__gXhDm\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getError = state => state.contacts.error;\r\nconst getLoading = state => state.contacts.loading;\r\nconst getContacts = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getFiltredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) =>\r\n    contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    ),\r\n);\r\n\r\nconst contactsSelectors = {\r\n  getError,\r\n  getLoading,\r\n  getContacts,\r\n  getFilter,\r\n  getFiltredContacts,\r\n};\r\nexport default contactsSelectors;\r\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operaions';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport { Form, Button } from 'react-bootstrap';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  hendelInputChange = event => {\n    this.setState({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n  hendelSubmit = event => {\n    event.preventDefault();\n\n    const isAvailable = this.props.contacts.some(\n      contactItem =>\n        contactItem.name.toLowerCase() === this.state.name.toLowerCase(),\n    );\n    if (isAvailable) {\n      alert(`${this.state.name} is already in contacts.`);\n      this.setState({\n        name: '',\n        number: '',\n      });\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.props.onAddContact(newContact);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <Form className={styles.form} onSubmit={this.hendelSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-ЯІіЇїҐґ]+(([' -][a-zA-Zа-яА-ЯІіЇїҐґ ])?[a-zA-Zа-яА-ЯІіЇїҐґ]*)*$\"\n            title=\"The name can only consist of letters, apostrophes, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan ...\"\n            name=\"name\"\n            required\n            onChange={this.hendelInputChange}\n            value={this.state.name}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Number</Form.Label>\n          <Form.Control\n            type=\"tel\"\n            placeholder=\"Enter number\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={this.hendelInputChange}\n            value={this.state.number}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Add contact\n        </Button>\n      </Form>\n    );\n  }\n}\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(addContact(contact)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\nimport axios from 'axios';\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(`/contacts`);\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nexport const addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post(`/contacts`, contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error.message));\r\n  }\r\n};\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error.message));\r\n  }\r\n};\r\n","import React from 'react';\nimport styles from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport { Form } from 'react-bootstrap';\n\nconst Filter = () => {\n  const filter = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n  const onChangeFilter = event =>\n    dispatch(changeFilter(event.currentTarget.value));\n\n  return (\n    <Form className={styles.form} controlId=\"formBasicEmail\">\n      <Form.Label>Name</Form.Label>\n      <Form.Control\n        type=\"text\"\n        placeholder=\"Enter name\"\n        pattern=\"^[a-zA-Zа-яА-ЯІіЇїҐґ]+(([' -][a-zA-Zа-яА-ЯІіЇїҐґ ])?[a-zA-Zа-яА-ЯІіЇїҐґ]*)*$\"\n        title=\"The name can only consist of letters, apostrophes, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan ...\"\n        name=\"filter\"\n        required\n        onChange={onChangeFilter}\n        value={filter}\n      />\n    </Form>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Contact.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-operaions';\nimport { Button } from 'react-bootstrap';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.contact}>\n      <div className={styles.contact__info}>\n        <p className={styles.name}>{name}</p>\n        <p className={styles.number}>{number}</p>\n      </div>\n\n      <Button\n        variant=\"primary\"\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </Button>\n    </div>\n  );\n};\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\nexport default Contact;\n","import Contact from '../Contact/Contact';\nimport styles from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/contacts-operaions';\nimport { useEffect } from 'react';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport { Spinner, ListGroup } from 'react-bootstrap';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const error = useSelector(contactsSelectors.getError);\n  const loading = useSelector(contactsSelectors.getLoading);\n  const filtredContacts = useSelector(contactsSelectors.getFiltredContacts);\n  return (\n    <>\n      {loading && <Spinner animation=\"border\" variant=\"primary\" />}\n      {error && <h2 className={styles.error}>{error}</h2>}\n      <ListGroup className={styles.contactList}>\n        {filtredContacts.map(({ id, name, number }) => (\n          <ListGroup.Item key={id}>\n            <Contact id={id} name={name} number={number} />\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n    </>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from '../components/ContactForm/ContactForm';\r\nimport Filter from '../components/Filter/Filter';\r\nimport ContactList from '../components/ContactList/ContactList';\r\n\r\nfunction ContactsView() {\r\n  return (\r\n    <>\r\n      <h2>Phonebook</h2>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}